Ingreedy = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = /^[\n]/,
        peg$c1 = { type: "class", value: "[\\n]", description: "[\\n]" },
        peg$c2 = function(a, u, i) {
            var result = AdditionCheck.ingredientCheck(a,u,i);

            for(var i in result) {
              if(result[i] === null || result[i] === undefined) {
                delete result[i];
              }
            }
             return result  ;
          },
        peg$c3 = { type: "any", description: "any character" },
        peg$c4 = function() {
            return {};
          },
        peg$c5 = "(",
        peg$c6 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c7 = ")",
        peg$c8 = { type: "literal", value: ")", description: "\")\"" },
        peg$c9 = function(ingredient, amount, unit) {
            return {ingredient:ingredient, amount: amount, unit: unit };
          },
        peg$c10 = function() {
            return "" },
        peg$c11 = " ",
        peg$c12 = { type: "literal", value: " ", description: "\" \"" },
        peg$c13 = /^[\t]/,
        peg$c14 = { type: "class", value: "[\\t]", description: "[\\t]" },
        peg$c15 = function(letters) { return letters.join(''); },
        peg$c16 = /^[,]/,
        peg$c17 = { type: "class", value: "[,]", description: "[,]" },
        peg$c18 = /^[\/]/,
        peg$c19 = { type: "class", value: "[/]", description: "[/]" },
        peg$c20 = /^[\xBC\xBD\xBE]/,
        peg$c21 = { type: "class", value: "[\\u00BC\\u00BD\\u00BE]", description: "[\\u00BC\\u00BD\\u00BE]" },
        peg$c22 = /^[0-9]/,
        peg$c23 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c24 = function(digits) { return digits.join(''); },
        peg$c25 = /^[a-zA-Z\xE4\xF6\xFC\xC4\xD6\xDC\xDF()\xE0\xC0.]/,
        peg$c26 = { type: "class", value: "[a-zA-Z\\u00E4\\u00F6\\u00FC\\u00C4\\u00D6\\u00DC\\u00df\\u0028\\u0029\\u00E0\\u00C0\\u002E]", description: "[a-zA-Z\\u00E4\\u00F6\\u00FC\\u00C4\\u00D6\\u00DC\\u00df\\u0028\\u0029\\u00E0\\u00C0\\u002E]" },
        peg$c27 = /^[a-zA-Z\xE4\xF6\xFC\xC4\xD6\xDC\xDF\-]/,
        peg$c28 = { type: "class", value: "[a-zA-Z\\u00E4\\u00F6\\u00FC\\u00C4\\u00D6\\u00DC\\u00df\\u002d]", description: "[a-zA-Z\\u00E4\\u00F6\\u00FC\\u00C4\\u00D6\\u00DC\\u00df\\u002d]" },
        peg$c29 = "tasse",
        peg$c30 = { type: "literal", value: "tasse", description: "\"tasse\"" },
        peg$c31 = "n",
        peg$c32 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c33 = "tas.",
        peg$c34 = { type: "literal", value: "tas.", description: "\"tas.\"" },
        peg$c35 = "l\xF6ffel",
        peg$c36 = { type: "literal", value: "l\xF6ffel", description: "\"l\\xF6ffel\"" },
        peg$c37 = "teeloeffel",
        peg$c38 = { type: "literal", value: "teeloeffel", description: "\"teeloeffel\"" },
        peg$c39 = "teel\xF6ffel",
        peg$c40 = { type: "literal", value: "teel\xF6ffel", description: "\"teel\\xF6ffel\"" },
        peg$c41 = "teel.",
        peg$c42 = { type: "literal", value: "teel.", description: "\"teel.\"" },
        peg$c43 = "el",
        peg$c44 = { type: "literal", value: "el", description: "\"el\"" },
        peg$c45 = "lfl.",
        peg$c46 = { type: "literal", value: "lfl.", description: "\"lfl.\"" },
        peg$c47 = "lfl",
        peg$c48 = { type: "literal", value: "lfl", description: "\"lfl\"" },
        peg$c49 = "tl.",
        peg$c50 = { type: "literal", value: "tl.", description: "\"tl.\"" },
        peg$c51 = "tl",
        peg$c52 = { type: "literal", value: "tl", description: "\"tl\"" },
        peg$c53 = "cups",
        peg$c54 = { type: "literal", value: "cups", description: "\"cups\"" },
        peg$c55 = "cup",
        peg$c56 = { type: "literal", value: "cup", description: "\"cup\"" },
        peg$c57 = "c.",
        peg$c58 = { type: "literal", value: "c.", description: "\"c.\"" },
        peg$c59 = "c",
        peg$c60 = { type: "literal", value: "c", description: "\"c\"" },
        peg$c61 = "fluid",
        peg$c62 = { type: "literal", value: "fluid", description: "\"fluid\"" },
        peg$c63 = "fl",
        peg$c64 = { type: "literal", value: "fl", description: "\"fl\"" },
        peg$c65 = ".",
        peg$c66 = { type: "literal", value: ".", description: "\".\"" },
        peg$c67 = "gallons",
        peg$c68 = { type: "literal", value: "gallons", description: "\"gallons\"" },
        peg$c69 = "gallon",
        peg$c70 = { type: "literal", value: "gallon", description: "\"gallon\"" },
        peg$c71 = "gal.",
        peg$c72 = { type: "literal", value: "gal.", description: "\"gal.\"" },
        peg$c73 = "gal",
        peg$c74 = { type: "literal", value: "gal", description: "\"gal\"" },
        peg$c75 = "ounces",
        peg$c76 = { type: "literal", value: "ounces", description: "\"ounces\"" },
        peg$c77 = "ounce",
        peg$c78 = { type: "literal", value: "ounce", description: "\"ounce\"" },
        peg$c79 = "oz.",
        peg$c80 = { type: "literal", value: "oz.", description: "\"oz.\"" },
        peg$c81 = "oz",
        peg$c82 = { type: "literal", value: "oz", description: "\"oz\"" },
        peg$c83 = "pints",
        peg$c84 = { type: "literal", value: "pints", description: "\"pints\"" },
        peg$c85 = "pint",
        peg$c86 = { type: "literal", value: "pint", description: "\"pint\"" },
        peg$c87 = "pt.",
        peg$c88 = { type: "literal", value: "pt.", description: "\"pt.\"" },
        peg$c89 = "pt",
        peg$c90 = { type: "literal", value: "pt", description: "\"pt\"" },
        peg$c91 = "pounds",
        peg$c92 = { type: "literal", value: "pounds", description: "\"pounds\"" },
        peg$c93 = "pound",
        peg$c94 = { type: "literal", value: "pound", description: "\"pound\"" },
        peg$c95 = "lbs.",
        peg$c96 = { type: "literal", value: "lbs.", description: "\"lbs.\"" },
        peg$c97 = "lbs",
        peg$c98 = { type: "literal", value: "lbs", description: "\"lbs\"" },
        peg$c99 = "lb.",
        peg$c100 = { type: "literal", value: "lb.", description: "\"lb.\"" },
        peg$c101 = "lb",
        peg$c102 = { type: "literal", value: "lb", description: "\"lb\"" },
        peg$c103 = "quarts",
        peg$c104 = { type: "literal", value: "quarts", description: "\"quarts\"" },
        peg$c105 = "quart",
        peg$c106 = { type: "literal", value: "quart", description: "\"quart\"" },
        peg$c107 = "qts.",
        peg$c108 = { type: "literal", value: "qts.", description: "\"qts.\"" },
        peg$c109 = "qts",
        peg$c110 = { type: "literal", value: "qts", description: "\"qts\"" },
        peg$c111 = "qt.",
        peg$c112 = { type: "literal", value: "qt.", description: "\"qt.\"" },
        peg$c113 = "qt",
        peg$c114 = { type: "literal", value: "qt", description: "\"qt\"" },
        peg$c115 = "tablespoons",
        peg$c116 = { type: "literal", value: "tablespoons", description: "\"tablespoons\"" },
        peg$c117 = "tablespoon",
        peg$c118 = { type: "literal", value: "tablespoon", description: "\"tablespoon\"" },
        peg$c119 = "tbsp.",
        peg$c120 = { type: "literal", value: "tbsp.", description: "\"tbsp.\"" },
        peg$c121 = "tbsp",
        peg$c122 = { type: "literal", value: "tbsp", description: "\"tbsp\"" },
        peg$c123 = "tbs.",
        peg$c124 = { type: "literal", value: "tbs.", description: "\"tbs.\"" },
        peg$c125 = "tbs",
        peg$c126 = { type: "literal", value: "tbs", description: "\"tbs\"" },
        peg$c127 = "T.",
        peg$c128 = { type: "literal", value: "T.", description: "\"T.\"" },
        peg$c129 = "T",
        peg$c130 = { type: "literal", value: "T", description: "\"T\"" },
        peg$c131 = "teaspoons",
        peg$c132 = { type: "literal", value: "teaspoons", description: "\"teaspoons\"" },
        peg$c133 = "teaspoon",
        peg$c134 = { type: "literal", value: "teaspoon", description: "\"teaspoon\"" },
        peg$c135 = "tsp.",
        peg$c136 = { type: "literal", value: "tsp.", description: "\"tsp.\"" },
        peg$c137 = "tsp",
        peg$c138 = { type: "literal", value: "tsp", description: "\"tsp\"" },
        peg$c139 = "t.",
        peg$c140 = { type: "literal", value: "t.", description: "\"t.\"" },
        peg$c141 = "t",
        peg$c142 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c143 = "gramm",
        peg$c144 = { type: "literal", value: "gramm", description: "\"gramm\"" },
        peg$c145 = "gram",
        peg$c146 = { type: "literal", value: "gram", description: "\"gram\"" },
        peg$c147 = "gr.",
        peg$c148 = { type: "literal", value: "gr.", description: "\"gr.\"" },
        peg$c149 = "gr",
        peg$c150 = { type: "literal", value: "gr", description: "\"gr\"" },
        peg$c151 = "g.",
        peg$c152 = { type: "literal", value: "g.", description: "\"g.\"" },
        peg$c153 = "g",
        peg$c154 = { type: "literal", value: "g", description: "\"g\"" },
        peg$c155 = "kilogramm",
        peg$c156 = { type: "literal", value: "kilogramm", description: "\"kilogramm\"" },
        peg$c157 = "kilogram",
        peg$c158 = { type: "literal", value: "kilogram", description: "\"kilogram\"" },
        peg$c159 = "kg.",
        peg$c160 = { type: "literal", value: "kg.", description: "\"kg.\"" },
        peg$c161 = "kg",
        peg$c162 = { type: "literal", value: "kg", description: "\"kg\"" },
        peg$c163 = "liter",
        peg$c164 = { type: "literal", value: "liter", description: "\"liter\"" },
        peg$c165 = "ltr.",
        peg$c166 = { type: "literal", value: "ltr.", description: "\"ltr.\"" },
        peg$c167 = "ltr",
        peg$c168 = { type: "literal", value: "ltr", description: "\"ltr\"" },
        peg$c169 = "l.",
        peg$c170 = { type: "literal", value: "l.", description: "\"l.\"" },
        peg$c171 = "l",
        peg$c172 = { type: "literal", value: "l", description: "\"l\"" },
        peg$c173 = "milliliter",
        peg$c174 = { type: "literal", value: "milliliter", description: "\"milliliter\"" },
        peg$c175 = "ml.",
        peg$c176 = { type: "literal", value: "ml.", description: "\"ml.\"" },
        peg$c177 = "ml",
        peg$c178 = { type: "literal", value: "ml", description: "\"ml\"" },
        peg$c179 = "pfund",
        peg$c180 = { type: "literal", value: "pfund", description: "\"pfund\"" },
        peg$c181 = "pfd.",
        peg$c182 = { type: "literal", value: "pfd.", description: "\"pfd.\"" },
        peg$c183 = "pfd",
        peg$c184 = { type: "literal", value: "pfd", description: "\"pfd\"" },
        peg$c185 = "gestrichener",
        peg$c186 = { type: "literal", value: "gestrichener", description: "\"gestrichener\"" },
        peg$c187 = "gestrichene",
        peg$c188 = { type: "literal", value: "gestrichene", description: "\"gestrichene\"" },
        peg$c189 = "gestrichen",
        peg$c190 = { type: "literal", value: "gestrichen", description: "\"gestrichen\"" },
        peg$c191 = "handvolle",
        peg$c192 = { type: "literal", value: "handvolle", description: "\"handvolle\"" },
        peg$c193 = "handvoll",
        peg$c194 = { type: "literal", value: "handvoll", description: "\"handvoll\"" },
        peg$c195 = "handvol",
        peg$c196 = { type: "literal", value: "handvol", description: "\"handvol\"" },
        peg$c197 = "prisen",
        peg$c198 = { type: "literal", value: "prisen", description: "\"prisen\"" },
        peg$c199 = "prise",
        peg$c200 = { type: "literal", value: "prise", description: "\"prise\"" },
        peg$c201 = "stangen",
        peg$c202 = { type: "literal", value: "stangen", description: "\"stangen\"" },
        peg$c203 = "stange",
        peg$c204 = { type: "literal", value: "stange", description: "\"stange\"" },
        peg$c205 = "dose",
        peg$c206 = { type: "literal", value: "dose", description: "\"dose\"" },
        peg$c207 = "dosen",
        peg$c208 = { type: "literal", value: "dosen", description: "\"dosen\"" },
        peg$c209 = "bund",
        peg$c210 = { type: "literal", value: "bund", description: "\"bund\"" },
        peg$c211 = "koerniger",
        peg$c212 = { type: "literal", value: "koerniger", description: "\"koerniger\"" },
        peg$c213 = "k\xF6rniger",
        peg$c214 = { type: "literal", value: "k\xF6rniger", description: "\"k\\xF6rniger\"" },
        peg$c215 = "k\xF6rnige",
        peg$c216 = { type: "literal", value: "k\xF6rnige", description: "\"k\\xF6rnige\"" },
        peg$c217 = "kleine",
        peg$c218 = { type: "literal", value: "kleine", description: "\"kleine\"" },
        peg$c219 = "kleiner",
        peg$c220 = { type: "literal", value: "kleiner", description: "\"kleiner\"" },
        peg$c221 = "etwas",
        peg$c222 = { type: "literal", value: "etwas", description: "\"etwas\"" },
        peg$c223 = "etwa",
        peg$c224 = { type: "literal", value: "etwa", description: "\"etwa\"" },
        peg$c225 = "packung",
        peg$c226 = { type: "literal", value: "packung", description: "\"packung\"" },
        peg$c227 = "packungen",
        peg$c228 = { type: "literal", value: "packungen", description: "\"packungen\"" },
        peg$c229 = "stiele",
        peg$c230 = { type: "literal", value: "stiele", description: "\"stiele\"" },
        peg$c231 = "stiel",
        peg$c232 = { type: "literal", value: "stiel", description: "\"stiel\"" },
        peg$c233 = "breite",
        peg$c234 = { type: "literal", value: "breite", description: "\"breite\"" },
        peg$c235 = "breiten",
        peg$c236 = { type: "literal", value: "breiten", description: "\"breiten\"" },
        peg$c237 = "ggf",
        peg$c238 = { type: "literal", value: "ggf", description: "\"ggf\"" },
        peg$c239 = "ggfs",
        peg$c240 = { type: "literal", value: "ggfs", description: "\"ggfs\"" },
        peg$c241 = "ggfs.",
        peg$c242 = { type: "literal", value: "ggfs.", description: "\"ggfs.\"" },
        peg$c243 = "ggf.",
        peg$c244 = { type: "literal", value: "ggf.", description: "\"ggf.\"" },
        peg$c245 = "mittelgro\xDFe",
        peg$c246 = { type: "literal", value: "mittelgro\xDFe", description: "\"mittelgro\\xDFe\"" },
        peg$c247 = "mittelgro\xDFe(s)",
        peg$c248 = { type: "literal", value: "mittelgro\xDFe(s)", description: "\"mittelgro\\xDFe(s)\"" },
        peg$c249 = "mittelgrosse",
        peg$c250 = { type: "literal", value: "mittelgrosse", description: "\"mittelgrosse\"" },
        peg$c251 = "mittelgrosse(s)",
        peg$c252 = { type: "literal", value: "mittelgrosse(s)", description: "\"mittelgrosse(s)\"" },
        peg$c253 = "scheiben",
        peg$c254 = { type: "literal", value: "scheiben", description: "\"scheiben\"" },
        peg$c255 = "scheibe",
        peg$c256 = { type: "literal", value: "scheibe", description: "\"scheibe\"" },
        peg$c257 = "blaetter",
        peg$c258 = { type: "literal", value: "blaetter", description: "\"blaetter\"" },
        peg$c259 = "bl\xE4tter",
        peg$c260 = { type: "literal", value: "bl\xE4tter", description: "\"bl\\xE4tter\"" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parseingredient_addition();

      return s0;
    }

    function peg$parseingredient_addition() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseingredient_addition_item();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseingredient_addition_item();
      }

      return s0;
    }

    function peg$parseingredient_addition_item() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseamount();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsews();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseunit();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsews();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsephrase();
              if (s5 !== peg$FAILED) {
                s6 = [];
                if (peg$c0.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1); }
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c0.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c1); }
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c2(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.length > peg$currPos) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseamount() {
      var s0;

      s0 = peg$parsefloat();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemixed_number();
        if (s0 === peg$FAILED) {
          s0 = peg$parsefraction();
          if (s0 === peg$FAILED) {
            s0 = peg$parseinteger();
          }
        }
      }

      return s0;
    }

    function peg$parsecontainer() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsephrase();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseamount();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsews();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseunit();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c7;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c9(s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontainerBracket() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c5;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c5;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s2 = peg$c7;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c10();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsews() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c11;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c13.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
      }

      return s0;
    }

    function peg$parsespace() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c11;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }

      return s0;
    }

    function peg$parsephrase() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseword();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsespace();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseword();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsespace();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseword();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseletter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseletter();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefloat() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseinteger();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (peg$c16.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseinteger();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsemixed_number() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseinteger();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsefraction();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefraction_unicode();
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parsespace();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefraction_unicode();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseinteger();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsespace();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsefraction_unicode();
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              s2 = peg$parseinteger();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsefraction_unicode();
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
              } else {
                s0 = s1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefraction() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseinteger();
      if (s2 !== peg$FAILED) {
        if (peg$c18.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseinteger();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        if (peg$c20.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c22.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c22.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseletterold() {
      var s0;

      if (peg$c25.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }

      return s0;
    }

    function peg$parseletter() {
      var s0;

      if (peg$c27.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }

      return s0;
    }

    function peg$parsefraction_unicode() {
      var s0;

      if (peg$c20.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }

      return s0;
    }

    function peg$parseunit() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsegerman_unit();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseletter();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseenglish_unit();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseletter();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parsemetric_unit();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parseletter();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = void 0;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseimprecise_unit();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              peg$silentFails++;
              s4 = peg$parseletter();
              peg$silentFails--;
              if (s4 === peg$FAILED) {
                s3 = void 0;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegerman_unit() {
      var s0;

      s0 = peg$parseTasse();
      if (s0 === peg$FAILED) {
        s0 = peg$parseloeffel();
      }

      return s0;
    }

    function peg$parseTasse() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c29) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 110) {
          s2 = peg$c31;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c33) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
      }

      return s0;
    }

    function peg$parseloeffel() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c35) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c37) {
          s0 = input.substr(peg$currPos, 10);
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c39) {
            s0 = input.substr(peg$currPos, 9);
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c40); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c41) {
              s0 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c43) {
                s0 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c45) {
                  s0 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c46); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c47) {
                    s0 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c48); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c49) {
                      s0 = input.substr(peg$currPos, 3);
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c50); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c51) {
                        s0 = input.substr(peg$currPos, 2);
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c52); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseenglish_unit() {
      var s0;

      s0 = peg$parsecup();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefluid_ounce();
        if (s0 === peg$FAILED) {
          s0 = peg$parsegallon();
          if (s0 === peg$FAILED) {
            s0 = peg$parseounce();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepint();
              if (s0 === peg$FAILED) {
                s0 = peg$parsepound();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsequart();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsetablespoon();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseteaspoon();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecup() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c53) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c55) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c57) {
            s0 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c59) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c60); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefluid_ounce() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefluid();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseounce();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefluid() {
      var s0, s1, s2;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c61) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c63) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s2 = peg$c65;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsegallon() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c67) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c69) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c71) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c73) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c74); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseounce() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c75) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c77) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c79) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c81) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c82); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepint() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c83) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c85) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c87) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c89) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c90); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepound() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c91) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c93) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c94); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c95) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c97) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c98); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c99) {
                s0 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c100); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c101) {
                  s0 = input.substr(peg$currPos, 2);
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c102); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsequart() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c103) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c104); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c105) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c107) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c108); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c109) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c110); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c111) {
                s0 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c112); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c113) {
                  s0 = input.substr(peg$currPos, 2);
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c114); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetablespoon() {
      var s0;

      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c115) {
        s0 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c117) {
          s0 = input.substr(peg$currPos, 10);
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c119) {
            s0 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c120); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c121) {
              s0 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c122); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c123) {
                s0 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c124); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c125) {
                  s0 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c126); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c127) {
                    s0 = peg$c127;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c128); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 84) {
                      s0 = peg$c129;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c130); }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseteaspoon() {
      var s0;

      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c131) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c133) {
          s0 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c134); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c135) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c136); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c137) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c138); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c139) {
                s0 = peg$c139;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c140); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 116) {
                  s0 = peg$c141;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c142); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemetric_unit() {
      var s0;

      s0 = peg$parsegramm();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekilogramm();
        if (s0 === peg$FAILED) {
          s0 = peg$parseliter();
          if (s0 === peg$FAILED) {
            s0 = peg$parsemilliliter();
            if (s0 === peg$FAILED) {
              s0 = peg$parsePfund();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegramm() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c143) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c145) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c146); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c147) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c148); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c149) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c150); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c151) {
                s0 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c152); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 1).toLowerCase() === peg$c153) {
                  s0 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c154); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekilogramm() {
      var s0;

      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c155) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c157) {
          s0 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c158); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c159) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c160); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c161) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c162); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseliter() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c163) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c165) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c166); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c167) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c168); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c169) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c170); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c171) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c172); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemilliliter() {
      var s0;

      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c173) {
        s0 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c174); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c175) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c176); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c177) {
            s0 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c178); }
          }
        }
      }

      return s0;
    }

    function peg$parsePfund() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c179) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c180); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c181) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c182); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c183) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c184); }
          }
        }
      }

      return s0;
    }

    function peg$parseimprecise_unit() {
      var s0;

      s0 = peg$parsegestrichener();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehandvolle();
        if (s0 === peg$FAILED) {
          s0 = peg$parseprisen();
          if (s0 === peg$FAILED) {
            s0 = peg$parsestangen();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedose();
              if (s0 === peg$FAILED) {
                s0 = peg$parsebund();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsekoerniger();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsekleine();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseetwas();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsepackung();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsestiele();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsebreite();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseggf();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsemittelgroße();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseBlaetter();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseScheiben();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegestrichener() {
      var s0;

      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c185) {
        s0 = input.substr(peg$currPos, 12);
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c187) {
          s0 = input.substr(peg$currPos, 11);
          peg$currPos += 11;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c188); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c189) {
            s0 = input.substr(peg$currPos, 10);
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c190); }
          }
        }
      }

      return s0;
    }

    function peg$parsehandvolle() {
      var s0;

      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c191) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c193) {
          s0 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c194); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c195) {
            s0 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c196); }
          }
        }
      }

      return s0;
    }

    function peg$parseprisen() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c197) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c198); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c199) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c200); }
        }
      }

      return s0;
    }

    function peg$parsestangen() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c201) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c203) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c204); }
        }
      }

      return s0;
    }

    function peg$parsedose() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c205) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c206); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c207) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c208); }
        }
      }

      return s0;
    }

    function peg$parsebund() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c209) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c210); }
      }

      return s0;
    }

    function peg$parsekoerniger() {
      var s0;

      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c211) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c213) {
          s0 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c214); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c215) {
            s0 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c216); }
          }
        }
      }

      return s0;
    }

    function peg$parsekleine() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c217) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c218); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c219) {
          s0 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c220); }
        }
      }

      return s0;
    }

    function peg$parseetwas() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c221) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c222); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c223) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c224); }
        }
      }

      return s0;
    }

    function peg$parsepackung() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c225) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c226); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c227) {
          s0 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
      }

      return s0;
    }

    function peg$parsestiele() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c229) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c230); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c231) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c232); }
        }
      }

      return s0;
    }

    function peg$parsebreite() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c233) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c234); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c235) {
          s0 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c236); }
        }
      }

      return s0;
    }

    function peg$parseggf() {
      var s0;

      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c237) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c238); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c239) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c240); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c241) {
            s0 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c242); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c243) {
              s0 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c244); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemittelgroße() {
      var s0;

      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c245) {
        s0 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c246); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c247) {
          s0 = input.substr(peg$currPos, 14);
          peg$currPos += 14;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c248); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c249) {
            s0 = input.substr(peg$currPos, 12);
            peg$currPos += 12;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c250); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 15).toLowerCase() === peg$c251) {
              s0 = input.substr(peg$currPos, 15);
              peg$currPos += 15;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c252); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseScheiben() {
      var s0;

      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c253) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c255) {
          s0 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c256); }
        }
      }

      return s0;
    }

    function peg$parseBlaetter() {
      var s0;

      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c257) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c258); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c259) {
          s0 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c260); }
        }
      }

      return s0;
    }


      var AdditionCheck = {
        ingredientCheck: function(a,u,i) {
        if ((i==='Salz') && (u===null || u===undefined)) {
             u='Prise';
             a='1'
           }
        if ((i==='Öl') && (u===null || u===undefined)) {
             u='Etwas';
             a='1'
           }
        if ((i==='Puderzucker') && (u===null || u===undefined)) {
             u='Etwas';
             a='1'
           }

        if ((i==='Pfeffer') && (u===null || u===undefined)) {
             u='Prise';
             a='1'
           }
          return {
          amount: a,
          unit: u,
          ingredient: i
        };
        }
      };


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();